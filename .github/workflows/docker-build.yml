name: Build and Push Docker Image

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=dev
      

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            CYPHERS=${{ secrets.CYPHERS }}
            DNF=${{ secrets.DNF }}
            LOL=${{ secrets.LOL }}

      - name: Get existing container ID
        id: get_container
        run: |
          CONTAINER_NAME="${{ github.event.repository.name }}"
          
          RESPONSE=$(curl -s "${{ secrets.PORTAINER_URL }}/api/endpoints/${{ secrets.PORTAINER_ENV_NO }}/docker/containers/json?all=true" \
          -H "X-API-KEY: ${{ secrets.PORTAINER_TOKEN }}")
          
          if echo "$RESPONSE" | jq empty 2>/dev/null; then
          CONTAINER_ID=$(echo "$RESPONSE" | jq -r '
          .[] |
          select(.Names[]? | test("^/'$CONTAINER_NAME'$")) |
          .Id // empty
          ' 2>/dev/null)
          
          if [ -z "$CONTAINER_ID" ] || [ "$CONTAINER_ID" = "null" ]; then
          CONTAINER_ID=""
          fi
          else
          CONTAINER_ID=""
          fi
          
          echo "container_id=$CONTAINER_ID" >> $GITHUB_OUTPUT
          echo "container_name=$CONTAINER_NAME" >> $GITHUB_OUTPUT

      - name: Delete existing container
        if: steps.get_container.outputs.container_id != '' && steps.get_container.outputs.container_id != 'null'
        run: |
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X DELETE "${{ secrets.PORTAINER_URL }}/api/endpoints/${{ secrets.PORTAINER_ENV_NO }}/docker/containers/${{ steps.get_container.outputs.container_id }}?force=true" \
            -H "X-API-KEY: ${{ secrets.PORTAINER_TOKEN }}")
          
          HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          
          if [ $HTTP_STATUS -ne 204 ] && [ $HTTP_STATUS -ne 200 ] && [ $HTTP_STATUS -ne 404 ]; then
            echo "Failed to delete container (Status: $HTTP_STATUS)"
            exit 1
          fi

      - name: Pull latest image
        run: |
          REGISTRY_ENCODED=$(echo "${{ env.REGISTRY }}" | sed 's|/|%2F|g')
          IMAGE_ENCODED=$(echo "${{ env.IMAGE_NAME }}" | sed 's|/|%2F|g')
          
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST "${{ secrets.PORTAINER_URL }}/api/endpoints/${{ secrets.PORTAINER_ENV_NO }}/docker/images/create?fromImage=${REGISTRY_ENCODED}%2F${IMAGE_ENCODED}&tag=dev" \
          -H "X-API-KEY: ${{ secrets.PORTAINER_TOKEN }}" \
          -H "Referer: ${{ secrets.PORTAINER_URL }}")
          
          HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          
          if [ $HTTP_STATUS -ne 200 ]; then
            echo "Failed to pull image (Status: $HTTP_STATUS)"
            exit 1
          fi

      - name: Create new container
        run: |
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST "${{ secrets.PORTAINER_URL }}/api/endpoints/${{ secrets.PORTAINER_ENV_NO }}/docker/containers/create?name=${{ steps.get_container.outputs.container_name }}" \
            -H "X-API-KEY: ${{ secrets.PORTAINER_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"Image\": \"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev\",
              \"HostConfig\": {
                \"NetworkMode\": \"local\",
                \"PortBindings\": {
                  \"80/tcp\": [{\"HostPort\": \"8082\"}]
                },
                \"RestartPolicy\": {
                  \"Name\": \"unless-stopped\"
                }
              }
            }")
          
          HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          
          if [ $HTTP_STATUS -ne 201 ] && [ $HTTP_STATUS -ne 200 ]; then
            echo "Failed to create container (Status: $HTTP_STATUS)"
            exit 1
          fi

      - name: Start container
        run: |
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST "${{ secrets.PORTAINER_URL }}/api/endpoints/${{ secrets.PORTAINER_ENV_NO }}/docker/containers/${{ steps.get_container.outputs.container_name }}/start" \
            -H "X-API-KEY: ${{ secrets.PORTAINER_TOKEN }}")
          
          HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          
          if [ $HTTP_STATUS -ne 204 ] && [ $HTTP_STATUS -ne 200 ]; then
            echo "Failed to start container (Status: $HTTP_STATUS)"
            exit 1
          fi